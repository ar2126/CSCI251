import java.math.BigInteger;
import java.security.SecureRandom;


/**
 * RSA class for implementing the RSA encryption algorithm
 *
 * @author	Jesse Roux (jar4899)
 */
public class RSAEncrypter {
	// Exponent and modulus for the public key
	BigInteger e, n;

	/**
	 * Creates a new RSAEncrypter instance. `e` and `n` are the exponent
	 * and modulus (respectively) for the public key
	 */
	public RSAEncrypter(BigInteger e, BigInteger n) {
		this.e = e;
		this.n = n;
	}

	/**
	 * Encrypts a message and returns the ciphertext as a byte array
	 */
	public byte[] encrypt(String message) {
		OAEP encoder = new OAEP();

		// Generate 32 bytes of random data
		byte[] seed = new byte[32];
		new SecureRandom().nextBytes(seed);

		// Encode and encrypt the message
		BigInteger m = encoder.encode(message, seed);
		BigInteger c = m.modPow(e, n);

		return c.toByteArray();
	}
}